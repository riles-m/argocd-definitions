---
# Source: immich/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: immich-redis
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.1.4
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
---
# Source: immich/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-redis-configuration
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.1.4
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: immich/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-redis-health
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.1.4
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: immich/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-redis-scripts
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.1.4
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: immich/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: immich-redis-headless
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.1.4
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: immich
---
# Source: immich/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: immich-redis-master
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.1.4
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: immich
    app.kubernetes.io/component: master
---
# Source: immich/templates/machine-learning.yaml
apiVersion: v1
kind: Service
metadata:
  name: immich-machine-learning
  labels:
    app.kubernetes.io/service: immich-machine-learning
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: machine-learning
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3003
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: machine-learning
---
# Source: immich/templates/server.yaml
apiVersion: v1
kind: Service
metadata:
  name: immich-server
  labels:
    app.kubernetes.io/service: immich-server
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3001
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: server
---
# Source: immich/templates/typesense.yaml
apiVersion: v1
kind: Service
metadata:
  name: immich-typesense
  labels:
    app.kubernetes.io/service: immich-typesense
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: typesense
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 8108
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: typesense
---
# Source: immich/templates/web.yaml
apiVersion: v1
kind: Service
metadata:
  name: immich-web
  labels:
    app.kubernetes.io/service: immich-web
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: web
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: web
---
# Source: immich/templates/machine-learning.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-machine-learning
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: machine-learning
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: machine-learning
      app.kubernetes.io/instance: immich
  template:
    metadata:
      labels:
        app.kubernetes.io/name: machine-learning
        app.kubernetes.io/instance: immich
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-machine-learning
          image: ghcr.io/immich-app/immich-machine-learning:v1.53.0
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_DATABASE_NAME
              value: immich
            - name: DB_HOSTNAME
              value: immich-postgresql
            - name: IMMICH_MACHINE_LEARNING_URL
              value: http://immich-machine-learning:3003
            - name: IMMICH_SERVER_URL
              value: http://immich-server:3001
            - name: IMMICH_WEB_URL
              value: http://immich-web:3000
            - name: REDIS_HOSTNAME
              value: immich-redis-master
            - name: TRANSFORMERS_CACHE
              value: /cache
            - name: TYPESENSE_API_KEY
              value: typesense
            - name: TYPESENSE_ENABLED
              value: "true"
            - name: TYPESENSE_HOST
              value: immich-typesense
          envFrom:
          - secretRef:
              name: immich-secret
          ports:
            - name: http
              containerPort: 3003
              protocol: TCP
          volumeMounts:
            - name: cache
              mountPath: /cache
            - name: library
              mountPath: /usr/src/app/upload
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
      volumes:
        - name: cache
          emptyDir:
            {}
        - name: library
          nfs:
            server: drebin.riles.xyz
            path: /tank/immich-library
---
# Source: immich/templates/microservices.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-microservices
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: microservices
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: microservices
      app.kubernetes.io/instance: immich
  template:
    metadata:
      labels:
        app.kubernetes.io/name: microservices
        app.kubernetes.io/instance: immich
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-microservices
          image: ghcr.io/immich-app/immich-server:v1.53.0
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
          args:
            
            - ./start-microservices.sh
          env:
            - name: DB_DATABASE_NAME
              value: immich
            - name: DB_HOSTNAME
              value: immich-postgresql
            - name: IMMICH_MACHINE_LEARNING_URL
              value: http://immich-machine-learning:3003
            - name: IMMICH_SERVER_URL
              value: http://immich-server:3001
            - name: IMMICH_WEB_URL
              value: http://immich-web:3000
            - name: REDIS_HOSTNAME
              value: immich-redis-master
            - name: REVERSE_GEOCODING_DUMP_DIRECTORY
              value: /geodata-cache
            - name: TYPESENSE_API_KEY
              value: typesense
            - name: TYPESENSE_ENABLED
              value: "true"
            - name: TYPESENSE_HOST
              value: immich-typesense
          envFrom:
          - secretRef:
              name: immich-secret
          volumeMounts:
            - name: geodata-cache
              mountPath: /geodata-cache
            - name: library
              mountPath: /usr/src/app/upload
          
      volumes:
        - name: geodata-cache
          emptyDir:
            {}
        - name: library
          nfs:
            server: drebin.riles.xyz
            path: /tank/immich-library
---
# Source: immich/templates/server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: server
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: server
      app.kubernetes.io/instance: immich
  template:
    metadata:
      labels:
        app.kubernetes.io/name: server
        app.kubernetes.io/instance: immich
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-server
          image: ghcr.io/immich-app/immich-server:v1.53.0
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
          args:
            
            - ./start-server.sh
          env:
            - name: DB_DATABASE_NAME
              value: immich
            - name: DB_HOSTNAME
              value: immich-postgresql
            - name: IMMICH_MACHINE_LEARNING_URL
              value: http://immich-machine-learning:3003
            - name: IMMICH_SERVER_URL
              value: http://immich-server:3001
            - name: IMMICH_WEB_URL
              value: http://immich-web:3000
            - name: REDIS_HOSTNAME
              value: immich-redis-master
            - name: TYPESENSE_API_KEY
              value: typesense
            - name: TYPESENSE_ENABLED
              value: "true"
            - name: TYPESENSE_HOST
              value: immich-typesense
          envFrom:
          - secretRef:
              name: immich-secret
          ports:
            - name: http
              containerPort: 3001
              protocol: TCP
          volumeMounts:
            - name: library
              mountPath: /usr/src/app/upload
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /server-info/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /server-info/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
      volumes:
        - name: library
          nfs:
            server: drebin.riles.xyz
            path: /tank/immich-library
---
# Source: immich/templates/typesense.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-typesense
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: typesense
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: typesense
      app.kubernetes.io/instance: immich
  template:
    metadata:
      labels:
        app.kubernetes.io/name: typesense
        app.kubernetes.io/instance: immich
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-typesense
          image: docker.io/typesense/typesense:0.24.0
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_DATABASE_NAME
              value: immich
            - name: DB_HOSTNAME
              value: immich-postgresql
            - name: IMMICH_MACHINE_LEARNING_URL
              value: http://immich-machine-learning:3003
            - name: IMMICH_SERVER_URL
              value: http://immich-server:3001
            - name: IMMICH_WEB_URL
              value: http://immich-web:3000
            - name: REDIS_HOSTNAME
              value: immich-redis-master
            - name: TYPESENSE_API_KEY
              value: typesense
            - name: TYPESENSE_DATA_DIR
              value: /tsdata
            - name: TYPESENSE_ENABLED
              value: "true"
            - name: TYPESENSE_HOST
              value: immich-typesense
          envFrom:
          - secretRef:
              name: immich-secret
          volumeMounts:
            - name: tsdata
              mountPath: /tsdata
          ports:
            - name: http
              containerPort: 8108
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
      volumes:
        - name: tsdata
          nfs:
            server: drebin.riles.xyz
            path: /ssd_pool/immich-tsdata
---
# Source: immich/templates/web.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-web
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: web
    app.kubernetes.io/version: v1.53.0
    helm.sh/chart: immich-0.1.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: web
      app.kubernetes.io/instance: immich
  template:
    metadata:
      labels:
        app.kubernetes.io/name: web
        app.kubernetes.io/instance: immich
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-web
          image: ghcr.io/immich-app/immich-web:v1.53.0
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
          args:
            
            - ./entrypoint.sh
          env:
            - name: DB_DATABASE_NAME
              value: immich
            - name: DB_HOSTNAME
              value: immich-postgresql
            - name: IMMICH_MACHINE_LEARNING_URL
              value: http://immich-machine-learning:3003
            - name: IMMICH_SERVER_URL
              value: http://immich-server:3001
            - name: IMMICH_WEB_URL
              value: http://immich-web:3000
            - name: REDIS_HOSTNAME
              value: immich-redis-master
            - name: TYPESENSE_API_KEY
              value: typesense
            - name: TYPESENSE_ENABLED
              value: "true"
            - name: TYPESENSE_HOST
              value: immich-typesense
          envFrom:
          - secretRef:
              name: immich-secret
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - name: library
              mountPath: /library
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 0
            periodSeconds: 5
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
      volumes:
        - name: library
          nfs:
            server: drebin.riles.xyz
            path: /tank/immich-library
---
# Source: immich/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: immich-redis-master
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.1.4
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: immich
      app.kubernetes.io/component: master
  serviceName: immich-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.1.4
        app.kubernetes.io/instance: immich
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: fd6c66bc8d5e22b3994fce27e151ac0bc2ff4748c450beabea643609843e9de6
        checksum/health: a0cfa3ee24cb24ff9472714ed54b9a77bbcb617f254bfd63107f21e7fba550c5
        checksum/scripts: 1da25e8a490263f050a61f9555ed23569f2ebf07a2f04fe3cd848e94dc46fa40
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: immich-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: immich
                    app.kubernetes.io/component: master
                namespaces:
                  - "productivity"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.4-debian-11-r17
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: immich-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: immich-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: immich-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: immich
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: immich-ingress
  labels:
  annotations:
    cert-manager.io/cluster-issuer: le-example-http
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 500m
spec:
  rules:
  - host: "immich.riles.xyz"
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: immich-web
              port:
                number: 3000
  tls:
  - hosts:
    - immich.riles.xyz
    secretName: tls-immich-ingress-http
---
# Source: immich/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: immich-postgresql-hl
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.8.1
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: immich
    app.kubernetes.io/component: primary
---
# Source: immich/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: immich-postgresql
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.8.1
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: immich
    app.kubernetes.io/component: primary
---
# Source: immich/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: immich-postgresql
  namespace: "productivity"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.8.1
    app.kubernetes.io/instance: immich
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: immich-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: immich
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: immich-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.8.1
        app.kubernetes.io/instance: immich
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: immich
                    app.kubernetes.io/component: primary
                namespaces:
                  - "productivity"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r6
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "immich"
            - name: POSTGRES_POSTGRESS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret
                  key: PG_PG_POSTGRESS-PASSWORD
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret
                  key: PG_POSTGRESS-PASSWORD
            - name: POSTGRES_DB
              value: "immich"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "immich" -d "dbname=immich" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "immich" -d "dbname=immich" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          nfs:
            server: drebin.riles.xyz
            path: /ssd_pool/immich-postgres-data
